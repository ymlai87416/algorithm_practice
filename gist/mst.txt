//uva11747
//Kruskalâ€™s Algorithm
static class Tuple implements Comparable<Tuple>{
    int first;
    int second, third;
    public Tuple(int a, int b, int c){
        first = a;
        second = b;
        third = c;
    }

    @Override
    public int compareTo(Tuple o) {
        if(first < o.first) return -1;
        else if(first > o.first) return 1;
        else{
            if(second < o.second) return -1;
            else if(second > o.second) return 1;
            else{
                if(third < o.third) return -1;
                else if(third > o.third) return 1;
                else return 0;
            }
        }
    }
}

//add union find here
static class UnionFind { // OOP style
    int[] p;
    int[] rank;

    UnionFind(int N) {
        p = new int[N];
        rank = new int[N];
        for (int i = 0; i < N; i++) p[i] = i;
    }

    void init(){
        for (int i = 0; i < p.length; i++) p[i] = i;
        Arrays.fill(rank, 0);
    }
    int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }

    boolean isSameSet(int i, int j) { return findSet(i) == findSet(j); }

    void unionSet(int i, int j) {
        if (!isSameSet(i, j)) { // if from different set
            int x = findSet(i), y = findSet(j);
            if (rank[x] > rank[y]) {
                p[y] = x; // rank keeps the tree short
            }
            else {
                p[x] = y;
                if (rank[x] == rank[y])
                    rank[y]++;
            }
        }
    }
}

for(int i=0; i<m; ++i){
    int u = sc.nextInt();
    int v = sc.nextInt();
    int w = sc.nextInt(); //weight

    EdgeList.push(new Tuple(w, u, v));
}

Collections.sort(EdgeList);

int mst_cost = 0;

Stack<Tuple> result = new Stack<Tuple>();

UF.init();

for (int i = 0; i < m; i++) {
    Tuple front = EdgeList.get(i);
    if (!UF.isSameSet(front.second, front.third)) {
        mst_cost += front.first;
        UF.unionSet(front.second, front.third);
    } else {
        result.add(EdgeList.get(i));
    }
}
