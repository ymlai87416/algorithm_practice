//uva11060
//uva124: recursive Kahn for all result
adjcnt = new int[101];
adj = new int[101][101];
visited = new int[101];
indegree = new int[101];

for(int i=0; i<nr; ++i){
    String rule = sc.nextLine();
    StringTokenizer st = new StringTokenizer(rule);
    String a = st.nextToken();
    String b = st.nextToken();
    int ia = mapper.get(a);
    int ib = mapper.get(b);
    adj[ia][adjcnt[ia]++] = ib;
    indegree[ib]++;
}

static ArrayList<Integer> Kahn(int V) {
    //this either sort all, or fail to sort any.
    PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
    ArrayList<Integer> answer = new ArrayList<Integer>();

    for(int i=0; i<V; ++i)
        if(indegree[i] == 0){
            queue.offer(i);
            indegree[i]--;
        }
    while(!queue.isEmpty()){
        int u= queue.poll();

        for(int j=0; j<adjcnt[u]; ++j){
            indegree[adj[u][j]]--;
        }

        for(int i=0; i<adjcnt[u]; ++i){
            int v = adj[u][i];
            if(indegree[v] == 0) {
                queue.offer(v);
                indegree[v]--;
            }
        }
        answer.add(u);
    }
    return answer;
}

/*
answer is ts, cannot use if all requirement must be satisfied before proceed.
*/

static void dfs2(int u){
    visited[u] = 1;
    Arrays.sort(adj[u], 0, adjcnt[u]);
    for (int j = adjcnt[u]-1; j >=0 ; j--) {
        int v = adj[u][j];
        if (visited[v] == 0)
            dfs2(v);
    }
    ts.add(u);
}

ts = new ArrayList<Integer>();
for(int i=nd-1; i>=0; --i){
    if (visited[i] == 0)
        dfs2(i);
}
Collections.reverse(ts);