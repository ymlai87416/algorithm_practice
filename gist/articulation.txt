static int[] dfs_num;
static int[] dfs_low;
static int[] dfs_parent;
static boolean[] articulation_vertex;
static int dfsNumberCounter;
static List<List<Pair>> AdjList;
static int dfsRoot = 0;
static int rootChildren = 0;
static List<Pair> bridges;

static void articulationPointAndBridge(int u) {
        dfs_low[u] = dfs_num[u] = dfsNumberCounter++; // dfs_low[u] <= dfs_num[u]
        for (int j = 0; j < (int)AdjList.get(u).size(); j++) {
            Pair v = AdjList.get(u).get(j);
            if (dfs_num[v.first] == UNVISITED) { // a tree edge
                dfs_parent[v.first] = u;
                if (u == dfsRoot) rootChildren++; // special case if u is a root
                articulationPointAndBridge(v.first);
                if (dfs_low[v.first] >= dfs_num[u]) // for articulation point
                    articulation_vertex[u] = true; // store this information first
                if (dfs_low[v.first] > dfs_num[u]) // for bridge
                    bridges.add(new Pair(Math.min(u, v.first), Math.max(u, v.first)));
                dfs_low[u] = Math.min(dfs_low[u], dfs_low[v.first]); // update dfs_low[u]
            }
            else if (v.first != dfs_parent[u]) // a back edge and not direct cycle
                dfs_low[u] = Math.min(dfs_low[u], dfs_num[v.first]); // update dfs_low[u]
        }
    }

//main
dfs_num = new int[V];
dfs_low = new int[V];
dfs_parent = new int[V];
articulation_vertex = new boolean[V];
for(int i=0; i<V; ++i){
    dfs_num[i] = UNVISITED;
    dfs_low[i] = 0;
    dfs_parent[i] = 0;
    articulation_vertex[i] = false;
    AdjList.add(new ArrayList<>());
}

bridges = new ArrayList<Pair>();

System.out.println("Bridge:\n");
for (int i = 0; i < V; i++)
    if (dfs_num[i] == -1) {
        dfsRoot = i; rootChildren = 0;
        articulationPointAndBridge(i);
        articulation_vertex[dfsRoot] = (rootChildren > 1) ;  // special case
    }

for(int br: bridges)
    System.out.format(Edge (%d, %d) is a bridge\n", u, v.first);

System.out.println("Articulation Points:\n");
for (int i = 0; i < V; i++)
    if (articulation_vertex[i])
        System.out.format(" Vertex %d\n", i);