//largest rectangle in histogram: updateRange not tested
//return index in rmq, get value => A[index]. Assume no number < 0.

static class SegmentTree { // the segment tree is stored like a heap array
    private int[] st = null;
    private int[] A;
    private int n;

    private int left(int p) {
        return p << 1;
    } // same as binary heap operations

    private int right(int p) {
        return (p << 1) + 1;
    }

    private void build(int p, int L, int R) { // O(n)
        if (L == R) // as L == R, either one is fine
            st[p] = L;
        else { // recursively compute the values
            build(left(p), L, (L + R) / 2);
            build(right(p), (L + R) / 2 + 1, R);
            int p1 = st[left(p)], p2 = st[right(p)];
            st[p]= (A[p1] <= A[p2]) ? p1 : p2;
        }
    }

    //can use to update individual element
    public void updateRange(int i, int j, int val){
        updateRange(1, 0, n-1, i, j, val);
    }

    private void updateRange(int p, int L, int R, int i, int j, int val){
        if (L == R) // as L == R, either one is fine
            st[p] = val;
        else { // recursively compute the values
            if(L <= i && i<=(L+R)/2) updateRange(left(p), L, (L+R)/2, i, Math.min(j, (L+R)/2), val);
            if ((L+R)/2+1 <= j && j <= R ) updateRange(right(p), (L+R)/2+1, R, Math.max(i, (L+R)/2+1), j, val);
            int p1 = st[left(p)], p2 = st[right(p)];          //Never a node with only left or right child.
            st[p]= (A[p1] <= A[p2]) ? p1 : p2;
        }
    }

    private int rmq(int p, int L, int R, int i, int j) { // O(log n)
        if (i > R || j < L) return -1; // current segment outside query range
        if (L >= i && R <= j) return st[p]; // inside query range
        // compute the min position in the left and right part of the interval
        int p1 = rmq(left(p), L, (L + R) / 2, i, j);
        int p2 = rmq(right(p), (L + R) / 2 + 1, R, i, j);
        if (p1 == -1) return p2; // if we try to access segment outside query
        if (p2 == -1) return p1; // same as above
        return (A[p1] <= A[p2]) ? p1 : p2; // as in build routine
    }


    public SegmentTree(int[] A, int size) {
        this.A = A;
        n = size;
        this.st = new int[size*4];
        build(1, 0, n - 1); // recursive build
    }

    public int rmq(int i, int j) {
        return rmq(1, 0, n - 1, i, j);
    }

    public void debugTree(int p, int L, int R){
        if (L == R) // as L == R, either one is fine
            System.out.print(st[p]);
        else { // recursively compute the values
            System.out.print("(");
            debugTree(left(p), L, (L+R)/2);
            System.out.print(st[p]);
            debugTree(right(p), (L+R)/2+1, R);
            System.out.print(")");
        }
    }

    public void debugTree2(int cnt){
        for(int i=0; i<cnt*4; ++i){
            System.out.print(st[i]);
        }
        System.out.println();
    }
}