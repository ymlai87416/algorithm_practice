//bfs
//with backtrack, visited store the parent's depth.
//track from target to src, can be reverse
int r = Integer.MAX_VALUE;

ArrayList<List<String>> result = null;

int[] visited = new int[objList.size()];
for(int j=0; j<visited.length; ++j) visited[j] = -1;
Queue<Integer> q = new ArrayDeque<Integer>();
q.offer(beginIdx);
visited[beginIdx] = 1;

while(!q.isEmpty()){
    int u = q.poll();
    for(int v: adjList.get(u)){
        if(visited[v] == -1){
            visited[v] = visited[u]+1;
            if(v == targetIdx)
                break;
            q.add(v);
        }
    }
}

if(visited[targetIdx] == -1) return new ArrayList<>();
else{
    Stack<String> st = new Stack<>();
    result = bfsBackTrack(newWordList, adjList, st, beginIdx, visited, targetIdx);
}

return result;


//backtrack
//recursive, find all possible route from source->target
private List<List<String>> bfsBackTrack(List<String> objList, List<List<Integer>> adjList, Stack<String> stack, int u, int[] visited, int target){
    if(u == target){
        List<List<String>> result = new ArrayList<>();
        stack.push(objList.get(u));
        result.add(new ArrayList<>(stack));
        stack.pop();
        return result;
    }

    List<List<String>> result = new ArrayList<>();

    for(int v : adjList.get(u)){
        if(visited[u] == visited[v] + 1) {
            stack.push(objList.get(u));
            List<List<String>> t = bfsBackTrack(objList, adjList, stack, v, visited);
            if (t != null)
                result.addAll(t);
            stack.pop();
        }
    }

    return result;
}



